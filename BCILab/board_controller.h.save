#pragma once

//#include "board_info_getter.h" // include it here for matlab
//#include "shared_export.h"

#ifdef __cplusplus
extern "C"
{
#endif
    // I dont use const char * because I am not sure that all
    // languages support passing const char * instead char *

    // data acquisition methods
    int prepare_session (
        int board_id, const char *json_brainflow_input_params);
    int start_stream (
        int buffer_size, const char *streamer_params, int board_id, const char *json_brainflow_input_params);
    int stop_stream (
        int board_id, const char *json_brainflow_input_params);
    int release_session (
        int board_id, const char *json_brainflow_input_params);
    int get_current_board_data (int num_samples, double *data_buf,
        int *returned_samples, int board_id, const char *json_brainflow_input_params);
    int get_board_data_count (
        int *result, int board_id, const char *json_brainflow_input_params);
    int get_board_data (
        int data_count, double *data_buf, int board_id, char *json_brainflow_input_params);
    int config_board (char *config, char *response,
        int *response_len, int board_id, char *json_brainflow_input_params);
    int is_prepared (
        int *prepared, int board_id, const char *json_brainflow_input_params);
    int insert_marker (
        double marker_value, int board_id, char *json_brainflow_input_params);

    // logging methods
    int set_log_level (int log_level);
    int set_log_file (char *log_file);
    int log_message (int log_level, char *message);

    // platform types and methods
    typedef const struct JNINativeInterface *JNIEnv; // A handle to use Java's JNI
    int java_set_jnienv (JNIEnv *java_jnienv);

#ifdef __cplusplus
}
#endif
